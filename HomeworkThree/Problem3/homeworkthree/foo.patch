diff --git a/bigNum.cpp b/bigNum.cpp
index fb40437..8a4701f 100644
--- a/bigNum.cpp
+++ b/bigNum.cpp
@@ -1,193 +1,210 @@
-//
-// Created by Ari Trachtenberg on 1/30/17.
-//
-
-#include <sstream>
-#include "bigNum.h"
-
-// IMPLEMENTATION
-
-bigNum::bigNum(string num) {
-    bool leading = true; // used to ignore leading zeroes
-    for (int ii = 0; ii < num.length(); ii++)
-        if (leading && num[ii] == '0')
-            continue;
-        else {
-            leading = false;
-            digits.insert(digits.begin(), num[ii] - '0');
-        }
-}
-
-bigNum::bigNum(unsigned int num) {
-    stringstream ss; ss<<num;
-    *this=bigNum(ss.str());
-}
-
-
-bigNum::bigNum(const bigNum& otherNum):digits(otherNum.digits) {
-}
-
-bigNum& bigNum::operator=(const bigNum& otherNum) {
-    digits = otherNum.digits;
-    return *this;
-}
-
-bigNum& bigNum::operator+=(const bigNum& addor) {
-    bigNum first, second; // second always has at least as many digits as first
-    auto_ptr<bigNum> result(new bigNum("0"));
-    if (digits.size() > addor.digits.size()) {
-        first = addor;
-        second = *this;
-    } else {
-        first = *this;
-        second = addor;
-    }
-
-    int ii;
-    int carry = 0;
-    for (ii = 0; ii < first.digits.size(); ii++) {
-        int sum = first.digits[ii] + second.digits[ii];
-        result->digits.push_back((sum + carry) % base);
-        if (sum + carry > (base - 1)) {
-            carry = 1;
-        } else {
-            carry = 0;
-        }
-    }
-
-    // finish up with the larger number
-    for (; ii < second.digits.size(); ii++)
-        if (carry) {
-            int dig = (second.digits[ii] + carry);
-            result->digits.push_back(dig % base);
-            carry = (dig > (base - 1) ? dig / base : 0);
-        } else
-            result->digits.push_back(second.digits[ii]);
-    if (carry)
-        result->digits.push_back(carry);
-
-    *this = *result;
-    return *this;
-}
-
-bigNum &bigNum::operator*=(const int cc) {
-    // multiplies by small number cc
-    int carry = 0;
-    auto_ptr<bigNum> result(new bigNum());
-    
-    for (int ii = 0; ii < digits.size(); ii++) {
-        int prod = digits[ii] * cc + carry;
-        result->digits.push_back(prod % base);
-        if (prod > (base - 1))
-            carry = prod / base;
-        else
-            carry = 0;
-    }
-
-    while (carry) {
-        result->digits.push_back(carry % base);
-        carry /= base;
-    }
-
-    *this=*result;
-    return *this;
-}
-
-bigNum &bigNum::operator*=(const bigNum& multiplicator) {
-    auto_ptr<bigNum> sum(new bigNum());
-    for (int ii = 0; ii < multiplicator.digits.size(); ii++) {
-        bigNum smallProd = *this * multiplicator.digits[ii];
-        smallProd << ii;
-        *sum += smallProd;
-    }
-    *this = *sum;
-    return *this;
-}
-
-bigNum &bigNum::operator/=(const bigNum& divisor) {
-    // pretty naive algorithm that is easy to implement
-    auto_ptr<bigNum> guess(new bigNum());
-    for (long ii = digits.size() - 1; ii >= 0; ii--) {
-        int dig;
-        bigNum trial("");
-        for (dig = 9; dig > 0; dig--) {
-            bigNum num("1");
-            num << ii;
-            trial = (num * dig);
-            if ((*guess + trial) * divisor <= *this)
-                break;
-        }
-        if (dig != 0)
-            *guess = *guess + trial;
-    }
-    if (guess->digits.size() == 1 && guess->digits[0] == 0)
-        guess->digits.pop_back(); // make it the empty representation
-    *this = *guess;
-    return *this;
-}
-
-bool bigNum::operator==(const bigNum& otherNum) const {
-    if (digits.size() != otherNum.digits.size()) {
-        return false;
-    }
-    for (int ii = 0; ii < digits.size(); ii++)
-        if (digits[ii] != otherNum.digits[ii])
-            return false;
-    return true;
-}
-
-bool bigNum::operator<=(const bigNum& otherNum) const {
-    if (digits.size() > otherNum.digits.size())
-        return false;
-    if (digits.size() < otherNum.digits.size())
-        return true;
-    // same number of digits
-    for (long ii = digits.size() - 1; ii >= 0; ii--)
-        if (digits[ii] < otherNum.digits[ii])
-            return true;
-        else if (digits[ii] > otherNum.digits[ii])
-            return false;
-    return true; // they are equal
-}
-
-void bigNum::operator<<(unsigned long cc) {
-    digits.insert(digits.begin(), cc, 0);
-}
-
-
-// friends and helpers
-std::ostream & operator<<(std::ostream& stream, const bigNum& num) {
-    if (num.digits.size() == 0)
-        stream << "[0]";
-    else
-        for (long ii = num.digits.size() - 1; ii >= 0; ii--)
-            stream << num.digits[ii];
-    return stream;
-}
-
-bigNum& operator+(const bigNum& addend, const bigNum& addor) {
-    bigNum *result = new bigNum();
-    *result = addend;
-    *result += addor;
-    return *result;
-}
-
-bigNum& operator*(const bigNum& multiplicand, const bigNum& multiplicator) {
-    bigNum *result = new bigNum();
-    *result = multiplicand;
-    *result *= multiplicator;
-    return *result;
-}
-
-bigNum& operator/(const bigNum& dividend, const bigNum& divisor) {
-    bigNum *result = new bigNum();
-    *result = dividend;
-    *result /= divisor;
-    return *result;
-}
-
-bigNum& operator*(const bigNum& multiplicand, int cc) {
-    bigNum *result = new bigNum(multiplicand);
-    *result *= cc;
-    return *result;
+//
+// Created by Ari Trachtenberg on 1/30/17.
+//
+
+#include <sstream>
+#include "bigNum.h"
+
+// IMPLEMENTATION
+
+bigNum::bigNum(string num) {
+    bool leading = true; // used to ignore leading zeroes
+    for (int ii = 0; ii < num.length(); ii++)
+        if (leading && num[ii] == '0')
+            continue;
+        else {
+            leading = false;
+            digits.insert(digits.begin(), num[ii] - '0');
+        }
+}
+
+bigNum::bigNum(unsigned int num) {
+    stringstream ss; ss<<num;
+    *this=bigNum(ss.str());
+}
+
+
+bigNum::bigNum(const bigNum& otherNum):digits(otherNum.digits) {
+}
+
+bigNum& bigNum::operator=(const bigNum& otherNum) {
+    digits = otherNum.digits;
+    return *this;
+}
+
+bigNum& bigNum::operator+=(const bigNum& addor) {
+    bigNum first, second; // second always has at least as many digits as first
+    auto_ptr<bigNum> result(new bigNum("0"));
+    if (digits.size() > addor.digits.size()) {
+        first = addor;
+        second = *this;
+    } else {
+        first = *this;
+        second = addor;
+    }
+
+    int ii;
+    int carry = 0;
+    for (ii = 0; ii < first.digits.size(); ii++) {
+        int sum = first.digits[ii] + second.digits[ii];
+        result->digits.push_back((sum + carry) % base);
+        if (sum + carry > (base - 1)) {
+            carry = 1;
+        } else {
+            carry = 0;
+        }
+    }
+
+    // finish up with the larger number
+    for (; ii < second.digits.size(); ii++)
+        if (carry) {
+            int dig = (second.digits[ii] + carry);
+            result->digits.push_back(dig % base);
+            carry = (dig > (base - 1) ? dig / base : 0);
+        } else
+            result->digits.push_back(second.digits[ii]);
+    if (carry)
+        result->digits.push_back(carry);
+
+    *this = *result;
+    return *this;
+}
+
+bigNum &bigNum::operator*=(const int cc) {
+    // multiplies by small number cc
+    int carry = 0;
+    auto_ptr<bigNum> result(new bigNum());
+    
+    for (int ii = 0; ii < digits.size(); ii++) {
+        int prod = digits[ii] * cc + carry;
+        result->digits.push_back(prod % base);
+        if (prod > (base - 1))
+            carry = prod / base;
+        else
+            carry = 0;
+    }
+
+    while (carry) {
+        result->digits.push_back(carry % base);
+        carry /= base;
+    }
+
+    *this=*result;
+    return *this;
+}
+
+bigNum &bigNum::operator*=(const bigNum& multiplicator) {
+    auto_ptr<bigNum> sum(new bigNum());
+    for (int ii = 0; ii < multiplicator.digits.size(); ii++) {
+        bigNum smallProd = *this * multiplicator.digits[ii];
+        smallProd << ii;
+        *sum += smallProd;
+    }
+    *this = *sum;
+    return *this;
+}
+
+bigNum &bigNum::operator/=(const bigNum& divisor) {
+    // pretty naive algorithm that is easy to implement
+    auto_ptr<bigNum> guess(new bigNum());
+    for (long ii = digits.size() - 1; ii >= 0; ii--) {
+        int dig;
+        bigNum trial("");
+        for (dig = 9; dig > 0; dig--) {
+            bigNum num("1");
+            num << ii;
+            trial = (num * dig);
+            if ((*guess + trial) * divisor <= *this)
+                break;
+        }
+        if (dig != 0)
+            *guess = *guess + trial;
+    }
+    if (guess->digits.size() == 1 && guess->digits[0] == 0)
+        guess->digits.pop_back(); // make it the empty representation
+    *this = *guess;
+    return *this;
+}
+
+bool bigNum::operator==(const bigNum& otherNum) const {
+    if (digits.size() != otherNum.digits.size()) {
+        return false;
+    }
+    for (int ii = 0; ii < digits.size(); ii++)
+        if (digits[ii] != otherNum.digits[ii])
+            return false;
+    return true;
+}
+
+bool bigNum::operator<=(const bigNum& otherNum) const {
+    if (digits.size() > otherNum.digits.size())
+        return false;
+    if (digits.size() < otherNum.digits.size())
+        return true;
+    // same number of digits
+    for (long ii = digits.size() - 1; ii >= 0; ii--)
+        if (digits[ii] < otherNum.digits[ii])
+            return true;
+        else if (digits[ii] > otherNum.digits[ii])
+            return false;
+    return true; // they are equal
+}
+
+bool bigNum::operator<(const bigNum& otherNum) const {
+    if (digits.size() > otherNum.digits.size())
+        return false;
+    if (digits.size() < otherNum.digits.size())
+        return true;
+    // same number of digits
+    for (long ii = digits.size() - 1; ii >= 0; ii--)
+        if (digits[ii] < otherNum.digits[ii])
+            return true;
+        else if (digits[ii] > otherNum.digits[ii])
+            return false;
+    return false; // they are equal
+}
+
+
+
+void bigNum::operator<<(unsigned long cc) {
+    digits.insert(digits.begin(), cc, 0);
+}
+
+
+// friends and helpers
+std::ostream & operator<<(std::ostream& stream, const bigNum& num) {
+    if (num.digits.size() == 0)
+        stream << "[0]";
+    else
+        for (long ii = num.digits.size() - 1; ii >= 0; ii--)
+            stream << num.digits[ii];
+    return stream;
+}
+
+bigNum& operator+(const bigNum& addend, const bigNum& addor) {
+    bigNum *result = new bigNum();
+    *result = addend;
+    *result += addor;
+    return *result;
+}
+
+
+bigNum& operator*(const bigNum& multiplicand, const bigNum& multiplicator) {
+    bigNum *result = new bigNum();
+    *result = multiplicand;
+    *result *= multiplicator;
+    return *result;
+}
+
+bigNum& operator/(const bigNum& dividend, const bigNum& divisor) {
+    bigNum *result = new bigNum();
+    *result = dividend;
+    *result /= divisor;
+    return *result;
+}
+
+bigNum& operator*(const bigNum& multiplicand, int cc) {
+    bigNum *result = new bigNum(multiplicand);
+    *result *= cc;
+    return *result;
 }
\ No newline at end of file
diff --git a/bigNum.h b/bigNum.h
index a14f06e..1164a05 100644
--- a/bigNum.h
+++ b/bigNum.h
@@ -1,117 +1,119 @@
-//
-// Created by Ari Trachtenberg on 1/30/17.
-//
-
-#ifndef HW1_BIGNUM_H
-#define HW1_BIGNUM_H
-
-// Written by Prof. Ari Trachtenberg for EC330
-#include <iostream>
-#include <vector>
-#include <string>
-#include <memory>
-
-using namespace std;
-
-/**
- * A class to represent arbitrarily large non-negative integers.
- */
-class bigNum {
-
-public:
-
-    // CONSTRUCTORS
-    
-    /**
-     * Constructs a bigNum from a given non-negative int
-     */
-    bigNum(unsigned int num);
-    
-    /**
-     * Constructs a bigNum from a given string.
-     * @param num contains only characters 0-9 and represents a positive integer >= 0
-     */
-    bigNum(string num = "");
-    
-    /**
-     * Constructs a copy of otherNum
-     */
-    bigNum(const bigNum& otherNum);
-
-    // INFORMATIONAL
-    /**
-     * @return true iff this bigNum is exactly numerically equal to otherNum
-     */
-    bool operator==(const bigNum& otherNum) const;
-
-    /**
-     * 
-     * @param otherNum
-     * @return true iff this number is numerically less than or equal to other number
-     */
-    bool operator<=(const bigNum& otherNum) const;
-
-    /**
-     * This bigNum becomes the same as otherNum
-     * @return the (new) version of this bigNum
-     */
-    bigNum& operator=(const bigNum& otherNum);
-
-    /**
-     * @return the [index]-th least-significant digit of the number
-     */
-    int operator[](size_t index) const { return digits.at(index); }
-    
-    /**
-     * 
-     * @return The number of significant digits in the number
-     */
-    size_t numDigits() const { return digits.size(); }
-    
-    /**
-     * ARITHMETIC ASSIGNMENT OPERATORS
-     */
-    bigNum& operator+=(const bigNum& addor);
-    bigNum& operator*=(const int cc);
-    bigNum& operator*=(const bigNum& multiplicand);
-    bigNum& operator/=(const bigNum& divisor);
-
-protected:
-    vector<int> digits; /** stores the digits of the current number */
-
-private:
-
-    /**
-     * @param cc > 0
-     * @return shifts the number to the left cc digits;
-     *         equivalent to multiplying the current number by base^cc
-     */
-    void operator<<(unsigned long cc);
-
-
-    // Constants
-    const static int base = 10; // the base of the number
-
-    // FRIENDS
-    /**
-     * Prints a human-readable version of bigNum [num]
-     * onto a given output stream
-     */
-    friend std::ostream & operator<<(std::ostream& stream, const bigNum& num);
-};
-
-/**
- * External arithmetic operators
- */
-bigNum& operator+(const bigNum& addend, const bigNum& addor);
-bigNum& operator*(const bigNum& multiplicand, const bigNum& multiplicator);
-bigNum& operator/(const bigNum& dividend, const bigNum& divisor);
-
-/**
- * Optimized multiplication of a bigNum by an int
- * @param cc > 0 is assumed
- * @return the product of this number and cc
- */
-bigNum& operator*(const bigNum& multiplicand, int cc);
-
-#endif //HW1_BIGNUM_H
+//
+// Created by Ari Trachtenberg on 1/30/17.
+//
+
+#ifndef HW1_BIGNUM_H
+#define HW1_BIGNUM_H
+
+// Written by Prof. Ari Trachtenberg for EC330
+#include <iostream>
+#include <vector>
+#include <string>
+#include <memory>
+
+using namespace std;
+
+/**
+ * A class to represent arbitrarily large non-negative integers.
+ */
+class bigNum {
+
+public:
+
+    // CONSTRUCTORS
+    
+    /**
+     * Constructs a bigNum from a given non-negative int
+     */
+    bigNum(unsigned int num);
+    
+    /**
+     * Constructs a bigNum from a given string.
+     * @param num contains only characters 0-9 and represents a positive integer >= 0
+     */
+    bigNum(string num = "");
+    
+    /**
+     * Constructs a copy of otherNum
+     */
+    bigNum(const bigNum& otherNum);
+
+    // INFORMATIONAL
+    /**
+     * @return true iff this bigNum is exactly numerically equal to otherNum
+     */
+    bool operator==(const bigNum& otherNum) const;
+
+    /**
+     * 
+     * @param otherNum
+     * @return true iff this number is numerically less than or equal to other number
+     */
+    bool operator<=(const bigNum& otherNum) const;
+
+    bool operator<(const bigNum& otherNum) const;
+
+    /**
+     * This bigNum becomes the same as otherNum
+     * @return the (new) version of this bigNum
+     */
+    bigNum& operator=(const bigNum& otherNum);
+
+    /**
+     * @return the [index]-th least-significant digit of the number
+     */
+    int operator[](size_t index) const { return digits.at(index); }
+    
+    /**
+     * 
+     * @return The number of significant digits in the number
+     */
+    size_t numDigits() const { return digits.size(); }
+    
+    /**
+     * ARITHMETIC ASSIGNMENT OPERATORS
+     */
+    bigNum& operator+=(const bigNum& addor);
+    bigNum& operator*=(const int cc);
+    bigNum& operator*=(const bigNum& multiplicand);
+    bigNum& operator/=(const bigNum& divisor);
+
+protected:
+    vector<int> digits; /** stores the digits of the current number */
+
+private:
+
+    /**
+     * @param cc > 0
+     * @return shifts the number to the left cc digits;
+     *         equivalent to multiplying the current number by base^cc
+     */
+    void operator<<(unsigned long cc);
+
+
+    // Constants
+    const static int base = 10; // the base of the number
+
+    // FRIENDS
+    /**
+     * Prints a human-readable version of bigNum [num]
+     * onto a given output stream
+     */
+    friend std::ostream & operator<<(std::ostream& stream, const bigNum& num);
+};
+
+/**
+ * External arithmetic operators
+ */
+bigNum& operator+(const bigNum& addend, const bigNum& addor);
+bigNum& operator*(const bigNum& multiplicand, const bigNum& multiplicator);
+bigNum& operator/(const bigNum& dividend, const bigNum& divisor);
+
+/**
+ * Optimized multiplication of a bigNum by an int
+ * @param cc > 0 is assumed
+ * @return the product of this number and cc
+ */
+bigNum& operator*(const bigNum& multiplicand, int cc);
+
+#endif //HW1_BIGNUM_H
diff --git a/bigNumSort.cpp b/bigNumSort.cpp
index 1a4f3fc..656b25e 100644
--- a/bigNumSort.cpp
+++ b/bigNumSort.cpp
@@ -1,22 +1,105 @@
-//
-// Created by Ari on 2/28/17.
-// A sample bigNumSort class for you to modify.
-//
-
-#include "genericSort.h"
-#include "bigNumSort.h"
-
-void bigNumSort::performSort() {
-    // A simple implementation of bubble sort
-
-    for (int ii=0; ii<data.size(); ii++)
-        for (int jj=0; jj<data.size(); jj++)
-
-            // compare items at index ii and jj and swap if needed
-            if (!(data[jj] <= data[ii])) {
-                // swap the two locations
-                bigNum temp(this->data[ii]);
-                data[ii]=data[jj];
-                data[jj]=temp;
-            }
-}
\ No newline at end of file
+//
+// Created by Ari on 2/28/17.
+// A sample bigNumSort class for you to modify.
+//
+
+#include <iostream>
+#include "genericSort.h"
+#include "bigNumSort.h"
+#include <vector>
+
+// MERGE SORT
+void bigNumSort::performSort() {        // acts as main function
+
+    bigNum A[data.size()];
+
+    // convert data to array of bigNums
+    for (int ss = 0; ss < data.size(); ss++)
+        A[ss] = data[ss];
+
+    cout << "DATA: [ ";                  // Prove data was successfully copied
+    for (int jj=0; jj < data.size(); jj++)
+        cout << data[jj] << " ";
+    cout << "] " << endl;
+    
+    mergeSort(A, 0, data.size() - 1);
+
+    // Produce final array, correctly sorted
+    //copy A[] to data[]         
+    for (int zz = 0; zz < data.size(); zz++)
+        data[zz] = A[zz];
+
+    cout << "NEW DATA: [ ";                  // Prove data was successfully copied
+    for (int hh = 0; hh < data.size(); hh++)
+        cout << data[hh] << " ";
+    cout << "] " << endl;
+}
+
+
+void bigNumSort::mergeSort(bigNum A[], int startIndex, int endIndex){
+
+    // recursive call mergesort until individual elements are in their own arrays
+    if ( startIndex < endIndex ){
+        int mid = ((startIndex+endIndex)/2);
+        mergeSort(A,startIndex, mid);
+        mergeSort(A, mid+1, endIndex);
+        mergeAll(A, startIndex, mid, endIndex);
+        
+    }
+}
+
+void bigNumSort::mergeAll(bigNum A[], int startIndex, int mid, int endIndex){
+
+    // temporary LEFT[] and RIGHT[] arrays to split A[]
+    int ii, jj, kk;
+
+    int leftSize = mid - startIndex + 1;
+    int rightSize = endIndex - mid;
+    
+    //leftArray = new bigNum[leftSize];
+    //rightArray = new bigNum[rightSize];
+
+    bigNum leftArray[leftSize];
+    bigNum rightArray[rightSize];
+
+    // 
+    for (ii = 0; ii < leftSize; ii++){
+        leftArray[ii] = A[startIndex + ii];
+    }
+    for (jj = 0; jj < rightSize; jj++){
+        rightArray[jj] = A[mid + 1 + jj];
+    }
+
+    ii = 0;
+    jj = 0;
+    kk = startIndex;
+
+    // swap elements if one is greater than the other
+    // merge to A[]
+    while (ii < leftSize && jj < rightSize){
+        if (leftArray[ii] < rightArray[jj]){
+            A[kk] = leftArray[ii];
+            ii++;
+        }
+        else{
+            A[kk] = rightArray[jj];
+            jj++;
+        }
+        kk++;
+    }
+
+    // merge any remaining elements 
+    while ( ii < leftSize){
+        A[kk] = leftArray[ii];
+        ii++;
+        kk++;
+    }
+    while ( jj < rightSize){
+        A[kk] = rightArray[jj];
+        jj++;
+        kk++;
+    }
+
+}
+
+
diff --git a/bigNumSort.h b/bigNumSort.h
index c39434f..54d714b 100644
--- a/bigNumSort.h
+++ b/bigNumSort.h
@@ -1,17 +1,21 @@
-//
-// Created by Ari on 2/28/17.
-// A sample bigNumSort class for you to modify.
-//
-
-#ifndef TESTING_BIGNUMSORT_H
-#define TESTING_BIGNUMSORT_H
-
-#include "genericSort.h"
-#include "bigNum.h"
-
-class bigNumSort : public genericSort<bigNum> {
-public:
-    void performSort();
-};
-
-#endif //TESTING_BIGNUMSORT_H
+//
+// Created by Ari on 2/28/17.
+// A sample bigNumSort class for you to modify.
+//
+
+#ifndef TESTING_BIGNUMSORT_H
+#define TESTING_BIGNUMSORT_H
+
+#include "genericSort.h"
+#include "bigNum.h"
+
+class bigNumSort : public genericSort<bigNum> {
+public:
+    void performSort();
+    void mergeSort(bigNum arr[], int, int);
+    void mergeAll(bigNum arr[], int, int, int);
+};
+
+
+
+#endif //TESTING_BIGNUMSORT_H
